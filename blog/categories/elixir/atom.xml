<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elixir | Remote Exception]]></title>
  <link href="http://pap.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://pap.github.io/"/>
  <updated>2014-02-14T20:07:52+00:00</updated>
  <id>http://pap.github.io/</id>
  <author>
    <name><![CDATA[Paulo A Pereira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir websockets+Mongo+Redis (1)]]></title>
    <link href="http://pap.github.io/blog/2014/02/13/elixr-plus-mongo-plus-redis-plus-websockets/"/>
    <updated>2014-02-13T23:20:23+00:00</updated>
    <id>http://pap.github.io/blog/2014/02/13/elixr-plus-mongo-plus-redis-plus-websockets</id>
    <content type="html"><![CDATA[<p>A few months ago a fellow developer was architecting a new app (soon to be launched) and he had a problem to solve:</p>

<p>  <strong>Provide realtime updates in one or several devices after an event triggered by one of those devices</strong></p>

<p>It had to be fault tolerant, performant&hellip; well, business as usual !</p>

<p>By the time i was quite interested in Erlang/Elixir, and i offered to prototype a solution. It just felt the right tool for the job.</p>

<p>All in all it was not that different of the canonical &ldquo;hello world&rdquo; of the Erlang VM languages &hellip; the chatroom example.</p>

<p>After a few days trying to find documentation and examples on websocket use i was able to prototype something in Erlang with <a href="https://github.com/extend/cowboy">cowboy</a>.</p>

<p>Then things changed a bit. Prior to websocket connection &ldquo;validation&rdquo; a user should have a valid key stored in a database.
And there would be a Redis channel to publish messages that had to be routed to a subset of the registered connected users.</p>

<p>It was time to refactor.</p>

<p>I opted to use <a href="http://elixir-lang.org">Elixir</a> and i&rsquo;ve also added <a href="https://github.com/extend/bullet">bullet</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to my previous cowboy setup.
I also had to integrate a few libraries to:</p>

<ul>
<li>parse and output json</li>
<li>connect to a database to verify identity</li>
<li>subscribe to a Redis channel and listen to messages</li>
</ul>


<p>I knew it would be a risk to chose a language which being actively developed (currently in version 0.12.4) but it just felt right !</p>

<p>On my next post i&rsquo;ll dive into implementation details.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><em>&ldquo;Bullet is a Cowboy handler and associated Javascript library for maintaining a persistent connection between a client and a server.&rdquo;</em><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
